// Code generated by protoc-gen-go. DO NOT EDIT.
// source: math.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	math.proto

It has these top-level messages:
	SumRequest
	SumReply
	ProdRequest
	ProdReply
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SumRequest struct {
	A int32 `protobuf:"varint,1,opt,name=a" json:"a,omitempty"`
	B int32 `protobuf:"varint,2,opt,name=b" json:"b,omitempty"`
}

func (m *SumRequest) Reset()                    { *m = SumRequest{} }
func (m *SumRequest) String() string            { return proto.CompactTextString(m) }
func (*SumRequest) ProtoMessage()               {}
func (*SumRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *SumRequest) GetA() int32 {
	if m != nil {
		return m.A
	}
	return 0
}

func (m *SumRequest) GetB() int32 {
	if m != nil {
		return m.B
	}
	return 0
}

type SumReply struct {
	R   int32  `protobuf:"varint,1,opt,name=r" json:"r,omitempty"`
	Err string `protobuf:"bytes,2,opt,name=err" json:"err,omitempty"`
}

func (m *SumReply) Reset()                    { *m = SumReply{} }
func (m *SumReply) String() string            { return proto.CompactTextString(m) }
func (*SumReply) ProtoMessage()               {}
func (*SumReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *SumReply) GetR() int32 {
	if m != nil {
		return m.R
	}
	return 0
}

func (m *SumReply) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

type ProdRequest struct {
	A int32 `protobuf:"varint,1,opt,name=a" json:"a,omitempty"`
	B int32 `protobuf:"varint,2,opt,name=b" json:"b,omitempty"`
}

func (m *ProdRequest) Reset()                    { *m = ProdRequest{} }
func (m *ProdRequest) String() string            { return proto.CompactTextString(m) }
func (*ProdRequest) ProtoMessage()               {}
func (*ProdRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ProdRequest) GetA() int32 {
	if m != nil {
		return m.A
	}
	return 0
}

func (m *ProdRequest) GetB() int32 {
	if m != nil {
		return m.B
	}
	return 0
}

type ProdReply struct {
	R   int32  `protobuf:"varint,1,opt,name=r" json:"r,omitempty"`
	Err string `protobuf:"bytes,2,opt,name=err" json:"err,omitempty"`
}

func (m *ProdReply) Reset()                    { *m = ProdReply{} }
func (m *ProdReply) String() string            { return proto.CompactTextString(m) }
func (*ProdReply) ProtoMessage()               {}
func (*ProdReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ProdReply) GetR() int32 {
	if m != nil {
		return m.R
	}
	return 0
}

func (m *ProdReply) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

func init() {
	proto.RegisterType((*SumRequest)(nil), "pb.SumRequest")
	proto.RegisterType((*SumReply)(nil), "pb.SumReply")
	proto.RegisterType((*ProdRequest)(nil), "pb.ProdRequest")
	proto.RegisterType((*ProdReply)(nil), "pb.ProdReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Math service

type MathClient interface {
	Sum(ctx context.Context, in *SumRequest, opts ...grpc.CallOption) (*SumReply, error)
	Prod(ctx context.Context, in *ProdRequest, opts ...grpc.CallOption) (*ProdReply, error)
}

type mathClient struct {
	cc *grpc.ClientConn
}

func NewMathClient(cc *grpc.ClientConn) MathClient {
	return &mathClient{cc}
}

func (c *mathClient) Sum(ctx context.Context, in *SumRequest, opts ...grpc.CallOption) (*SumReply, error) {
	out := new(SumReply)
	err := grpc.Invoke(ctx, "/pb.Math/Sum", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mathClient) Prod(ctx context.Context, in *ProdRequest, opts ...grpc.CallOption) (*ProdReply, error) {
	out := new(ProdReply)
	err := grpc.Invoke(ctx, "/pb.Math/Prod", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Math service

type MathServer interface {
	Sum(context.Context, *SumRequest) (*SumReply, error)
	Prod(context.Context, *ProdRequest) (*ProdReply, error)
}

func RegisterMathServer(s *grpc.Server, srv MathServer) {
	s.RegisterService(&_Math_serviceDesc, srv)
}

func _Math_Sum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MathServer).Sum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Math/Sum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MathServer).Sum(ctx, req.(*SumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Math_Prod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MathServer).Prod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Math/Prod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MathServer).Prod(ctx, req.(*ProdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Math_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Math",
	HandlerType: (*MathServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Sum",
			Handler:    _Math_Sum_Handler,
		},
		{
			MethodName: "Prod",
			Handler:    _Math_Prod_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "math.proto",
}

func init() { proto.RegisterFile("math.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 174 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xca, 0x4d, 0x2c, 0xc9,
	0xd0, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x52, 0xd2, 0xe0, 0xe2, 0x0a, 0x2e,
	0xcd, 0x0d, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0xe2, 0xe1, 0x62, 0x4c, 0x94, 0x60, 0x54,
	0x60, 0xd4, 0x60, 0x0d, 0x62, 0x4c, 0x04, 0xf1, 0x92, 0x24, 0x98, 0x20, 0xbc, 0x24, 0x25, 0x2d,
	0x2e, 0x0e, 0xb0, 0xca, 0x82, 0x9c, 0x4a, 0x90, 0x4c, 0x11, 0x4c, 0x5d, 0x91, 0x90, 0x00, 0x17,
	0x73, 0x6a, 0x51, 0x11, 0x58, 0x25, 0x67, 0x10, 0x88, 0xa9, 0xa4, 0xc9, 0xc5, 0x1d, 0x50, 0x94,
	0x9f, 0x42, 0x8c, 0xb1, 0xda, 0x5c, 0x9c, 0x10, 0xa5, 0x44, 0x98, 0x6b, 0x14, 0xcc, 0xc5, 0xe2,
	0x9b, 0x58, 0x92, 0x21, 0xa4, 0xcc, 0xc5, 0x1c, 0x5c, 0x9a, 0x2b, 0xc4, 0xa7, 0x57, 0x90, 0xa4,
	0x87, 0x70, 0xbe, 0x14, 0x0f, 0x9c, 0x0f, 0x32, 0x4c, 0x8d, 0x8b, 0x05, 0x64, 0xb2, 0x10, 0x3f,
	0x48, 0x14, 0xc9, 0x39, 0x52, 0xbc, 0x08, 0x81, 0x82, 0x9c, 0xca, 0x24, 0x36, 0x70, 0x68, 0x18,
	0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x7e, 0xae, 0x2b, 0x72, 0x1b, 0x01, 0x00, 0x00,
}
